/**
 * Ëé∑ÂèñÁî®Êà∑Â∑≤Êî∂Ëé∑NFTÊï∞ÊçÆÁöÑÁ§∫‰æã‰ª£Á†Å
 */

import { TomatoGardenService } from './TomatoGardenService';
import { Account, RpcProvider } from 'starknet';
import { TOMATO_TYPE_INFO, GROWTH_STAGE_INFO } from './types';

// ÂàùÂßãÂåñÊúçÂä°
const gardenService = new TomatoGardenService('sepolia');

/**
 * ÊñπÊ°à1ÔºöËé∑ÂèñÁî®Êà∑ÊâÄÊúâÂ∑≤Êî∂Ëé∑ÁöÑNFT
 */
export async function getUserHarvestedNFTs(userAddress: string) {
  try {
    console.log(`üîç Ëé∑ÂèñÁî®Êà∑ ${userAddress} ÁöÑÂ∑≤Êî∂Ëé∑NFT...`);
    
    const harvestedNFTs = await gardenService.getUserHarvestedNFTs(userAddress);
    
    console.log(`‚úÖ ÊâæÂà∞ ${harvestedNFTs.length} ‰∏™Â∑≤Êî∂Ëé∑ÁöÑNFT:`);
    
    harvestedNFTs.forEach((nft, index) => {
      const typeInfo = TOMATO_TYPE_INFO[nft.metadata.tomato_type];
      console.log(`\n${index + 1}. Áï™ËåÑNFT #${nft.id}`);
      console.log(`   Á±ªÂûã: ${typeInfo.chineseName} ${typeInfo.emoji}`);
      console.log(`   Á®ÄÊúâÂ∫¶: ${typeInfo.rarity}`);
      console.log(`   ÊâÄÊúâËÄÖ: ${nft.owner}`);
      console.log(`   Token URI: ${nft.tokenUri}`);
      console.log(`   Êî∂Ëé∑Êó∂Èó¥: ${new Date(nft.metadata.harvested_at * 1000).toLocaleString()}`);
      console.log(`   Ë¥®ÊäºÈáëÈ¢ù: ${nft.metadata.staked_amount} wei`);
    });
    
    return harvestedNFTs;
  } catch (error) {
    console.error('‚ùå Ëé∑ÂèñNFTÂ§±Ë¥•:', error);
    return [];
  }
}

/**
 * ÊñπÊ°à2ÔºöËé∑ÂèñËØ¶ÁªÜÁöÑNFTÊî∂Ëóè‰ø°ÊÅØ
 */
export async function getUserNFTCollection(userAddress: string) {
  try {
    console.log(`üé® Ëé∑ÂèñÁî®Êà∑ ${userAddress} ÁöÑNFTÊî∂ËóèËØ¶ÊÉÖ...`);
    
    const collection = await gardenService.getUserNFTCollection(userAddress);
    
    console.log(`üèÜ NFTÊî∂ËóèÊÄªÊï∞: ${collection.length}`);
    
    // ÊåâÁ®ÄÊúâÂ∫¶ÂàÜÁªÑ
    const byRarity = collection.reduce((acc, nft) => {
      acc[nft.rarity] = (acc[nft.rarity] || []).concat(nft);
      return acc;
    }, {} as Record<string, any[]>);
    
    console.log('\nüìä ÊåâÁ®ÄÊúâÂ∫¶ÂàÜÂ∏É:');
    Object.entries(byRarity).forEach(([rarity, nfts]) => {
      console.log(`   ${rarity}: ${nfts.length} ‰∏™`);
    });
    
    // ÊòæÁ§∫ËØ¶ÁªÜ‰ø°ÊÅØ
    console.log('\nüåü Êî∂ËóèËØ¶ÊÉÖ:');
    collection.forEach((nft, index) => {
      console.log(`\n${index + 1}. ${nft.type} #${nft.tokenId}`);
      console.log(`   Á®ÄÊúâÂ∫¶: ${nft.rarity}`);
      console.log(`   Êî∂Ëé∑Êó∂Èó¥: ${new Date(nft.harvestedAt * 1000).toLocaleString()}`);
      console.log(`   Token URI: ${nft.tokenUri}`);
    });
    
    return collection;
  } catch (error) {
    console.error('‚ùå Ëé∑ÂèñÊî∂ËóèÂ§±Ë¥•:', error);
    return [];
  }
}

/**
 * ÊñπÊ°à3ÔºöÊåâÁ±ªÂûãËé∑ÂèñNFTÊî∂Ëóè
 */
export async function getUserNFTsByType(userAddress: string) {
  try {
    console.log(`üìã ÊåâÁ±ªÂûãËé∑ÂèñÁî®Êà∑ ${userAddress} ÁöÑNFT...`);
    
    const tomatoesByType = await gardenService.getUserTomatoesByType(userAddress);
    
    console.log('\nüåà ÊåâÁ±ªÂûãÂàÜÂ∏É:');
    
    for (const [type, tomatoes] of Object.entries(tomatoesByType)) {
      const harvestedTomatoes = tomatoes.filter(t => t.isHarvested);
      if (harvestedTomatoes.length > 0) {
        const typeInfo = TOMATO_TYPE_INFO[parseInt(type)];
        console.log(`\n${typeInfo.chineseName} ${typeInfo.emoji} (${harvestedTomatoes.length} ‰∏™):`);
        
        harvestedTomatoes.forEach((tomato, index) => {
          console.log(`   ${index + 1}. #${tomato.id} - Êî∂Ëé∑Êó∂Èó¥: ${new Date(tomato.metadata.harvested_at * 1000).toLocaleString()}`);
        });
      }
    }
    
    return tomatoesByType;
  } catch (error) {
    console.error('‚ùå Ëé∑ÂèñÂ§±Ë¥•:', error);
    return {};
  }
}

/**
 * ÊñπÊ°à4ÔºöËé∑ÂèñNFTÂÖÉÊï∞ÊçÆÂíåÂõæÁâá
 */
export async function getNFTWithMetadata(tokenId: string) {
  try {
    console.log(`üîç Ëé∑ÂèñNFT #${tokenId} ÁöÑËØ¶ÁªÜ‰ø°ÊÅØ...`);
    
    const tomatoInfo = await gardenService.getTomatoInfo(tokenId);
    
    if (!tomatoInfo.isHarvested) {
      console.log('‚ùå Ê≠§Áï™ËåÑÂ∞öÊú™Êî∂Ëé∑ÔºåÊ≤°ÊúâNFT');
      return null;
    }
    
    console.log('‚úÖ NFT‰ø°ÊÅØ:');
    console.log(`   Token ID: ${tokenId}`);
    console.log(`   ÊâÄÊúâËÄÖ: ${tomatoInfo.owner}`);
    console.log(`   Token URI: ${tomatoInfo.tokenUri}`);
    
    // Ëé∑ÂèñNFTÂÖÉÊï∞ÊçÆÔºàÂ¶ÇÊûútokenURIÊåáÂêëJSONÔºâ
    if (tomatoInfo.tokenUri && tomatoInfo.tokenUri.startsWith('http')) {
      try {
        const response = await fetch(tomatoInfo.tokenUri);
        const metadata = await response.json();
        
        console.log('\nüé® NFTÂÖÉÊï∞ÊçÆ:');
        console.log(`   ÂêçÁß∞: ${metadata.name || 'N/A'}`);
        console.log(`   ÊèèËø∞: ${metadata.description || 'N/A'}`);
        console.log(`   ÂõæÁâá: ${metadata.image || 'N/A'}`);
        
        if (metadata.attributes) {
          console.log('\nüìã Â±ûÊÄß:');
          metadata.attributes.forEach((attr: any) => {
            console.log(`   ${attr.trait_type}: ${attr.value}`);
          });
        }
        
        return {
          ...tomatoInfo,
          nftMetadata: metadata
        };
      } catch (metadataError) {
        console.warn('‚ö†Ô∏è  Êó†Ê≥ïËé∑ÂèñNFTÂÖÉÊï∞ÊçÆ:', metadataError);
      }
    }
    
    return tomatoInfo;
  } catch (error) {
    console.error('‚ùå Ëé∑ÂèñNFT‰ø°ÊÅØÂ§±Ë¥•:', error);
    return null;
  }
}

/**
 * ÊñπÊ°à5ÔºöÂÆûÊó∂ÁõëÂê¨NFTÈì∏ÈÄ†‰∫ã‰ª∂
 */
export async function listenToNFTMints(callback: (nftData: any) => void) {
  try {
    console.log('üëÇ ÂºÄÂßãÁõëÂê¨NFTÈì∏ÈÄ†‰∫ã‰ª∂...');
    
    // ÁõëÂê¨ÂêàÁ∫¶‰∫ã‰ª∂
    await gardenService.listenToEvents(
      ['TomatoHarvested', 'Transfer'], // ÁõëÂê¨Êî∂Ëé∑ÂíåËΩ¨Áßª‰∫ã‰ª∂
      'latest', // ‰ªéÊúÄÊñ∞Âå∫ÂùóÂºÄÂßã
      async (event) => {
        if (event.keys && event.keys[0] === 'TomatoHarvested') {
          console.log('üéâ Ê£ÄÊµãÂà∞Êñ∞ÁöÑNFTÈì∏ÈÄ†!');
          
          // Ëß£Êûê‰∫ã‰ª∂Êï∞ÊçÆ
          const tomatoId = event.data[0];
          const owner = event.data[1];
          
          // Ëé∑ÂèñÂÆåÊï¥NFT‰ø°ÊÅØ
          const nftInfo = await gardenService.getTomatoInfo(tomatoId);
          
          console.log(`   Áï™ËåÑID: ${tomatoId}`);
          console.log(`   ÊâÄÊúâËÄÖ: ${owner}`);
          console.log(`   Á±ªÂûã: ${TOMATO_TYPE_INFO[nftInfo.metadata.tomato_type].chineseName}`);
          
          // ÂõûË∞ÉÂ§ÑÁêÜ
          callback({
            tokenId: tomatoId,
            owner,
            ...nftInfo
          });
        }
      }
    );
  } catch (error) {
    console.error('‚ùå ÁõëÂê¨‰∫ã‰ª∂Â§±Ë¥•:', error);
  }
}

/**
 * ‰ΩøÁî®Á§∫‰æã
 */
export async function demonstrateNFTFetching() {
  // Á§∫‰æãÁî®Êà∑Âú∞ÂùÄ
  const userAddress = '0x1234567890123456789012345678901234567890';
  
  console.log('üå± Tomato Garden NFT Ëé∑ÂèñÊºîÁ§∫\n');
  
  // ÊñπÊ°à1: Ëé∑ÂèñÊâÄÊúâÂ∑≤Êî∂Ëé∑ÁöÑNFT
  await getUserHarvestedNFTs(userAddress);
  
  console.log('\n' + '='.repeat(50) + '\n');
  
  // ÊñπÊ°à2: Ëé∑ÂèñËØ¶ÁªÜÊî∂Ëóè‰ø°ÊÅØ
  await getUserNFTCollection(userAddress);
  
  console.log('\n' + '='.repeat(50) + '\n');
  
  // ÊñπÊ°à3: ÊåâÁ±ªÂûãËé∑Âèñ
  await getUserNFTsByType(userAddress);
  
  console.log('\n' + '='.repeat(50) + '\n');
  
  // ÊñπÊ°à4: Ëé∑ÂèñÁâπÂÆöNFTÁöÑËØ¶ÁªÜ‰ø°ÊÅØ
  await getNFTWithMetadata('1');
  
  console.log('\n' + '='.repeat(50) + '\n');
  
  // ÊñπÊ°à5: ÁõëÂê¨Êñ∞ÁöÑNFTÈì∏ÈÄ†
  console.log('ËÆæÁΩÆNFTÈì∏ÈÄ†ÁõëÂê¨Âô®...');
  await listenToNFTMints((nftData) => {
    console.log('üéä Êñ∞NFTÈì∏ÈÄ†ÈÄöÁü•:', nftData);
  });
}

// React Hook Á§∫‰æã
export function useUserNFTs(userAddress: string) {
  const [nfts, setNfts] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  
  useEffect(() => {
    const loadNFTs = async () => {
      try {
        setLoading(true);
        const harvestedNFTs = await gardenService.getUserHarvestedNFTs(userAddress);
        setNfts(harvestedNFTs);
        setError(null);
      } catch (err) {
        setError(err.message);
        setNfts([]);
      } finally {
        setLoading(false);
      }
    };
    
    if (userAddress) {
      loadNFTs();
      
      // ÂÆöÊúüÂà∑Êñ∞
      const interval = setInterval(loadNFTs, 30000);
      return () => clearInterval(interval);
    }
  }, [userAddress]);
  
  return { nfts, loading, error, refetch: loadNFTs };
}

// Vue ÁªÑÂêàÂºèAPIÁ§∫‰æã
export function useNFTCollection(userAddress: Ref<string>) {
  const nfts = ref([]);
  const collection = ref(null);
  const loading = ref(false);
  
  const loadCollection = async () => {
    if (!userAddress.value) return;
    
    loading.value = true;
    try {
      const [userNFTs, collectionInfo] = await Promise.all([
        gardenService.getUserHarvestedNFTs(userAddress.value),
        gardenService.getUserNFTCollection(userAddress.value)
      ]);
      
      nfts.value = userNFTs;
      collection.value = collectionInfo;
    } catch (error) {
      console.error('Failed to load NFT collection:', error);
    } finally {
      loading.value = false;
    }
  };
  
  watch(userAddress, loadCollection, { immediate: true });
  
  return {
    nfts: readonly(nfts),
    collection: readonly(collection),
    loading: readonly(loading),
    refresh: loadCollection
  };
}

export default {
  getUserHarvestedNFTs,
  getUserNFTCollection,
  getUserNFTsByType,
  getNFTWithMetadata,
  listenToNFTMints,
  demonstrateNFTFetching
};